<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>装饰者模式 - tag - tiecheng</title>
        <link>https://blog.funnycode.cn/tags/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
        <description>装饰者模式 - tag - tiecheng</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>tczjhz@163.com (tiecheng)</managingEditor>
            <webMaster>tczjhz@163.com (tiecheng)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 04 Nov 2019 17:00:24 &#43;0800</lastBuildDate><atom:link href="https://blog.funnycode.cn/tags/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>装饰者模式</title>
    <link>https://blog.funnycode.cn/posts/pattern-decorator/</link>
    <pubDate>Mon, 04 Nov 2019 17:00:24 &#43;0800</pubDate>
    <author></author>
    <guid>https://blog.funnycode.cn/posts/pattern-decorator/</guid>
    <description><![CDATA[一、简介 Decorator Pattern（装饰模式） This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact. 白话文： 这个模式我们需要创建一个新的装饰类，然后装饰类会拥有一个]]></description>
</item></channel>
</rss>
